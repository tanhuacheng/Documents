整数几乎可以是任意大而不是限制在一个机器字的大小上

两个整数相除将得到一个确切的比值而非截断的值, 并且比值是由成对的任意大小的整数表示的, 所以比值可以表
示任意精度的分数

Common Lisp 也提供了几种浮点数, 它们可以映射到适当的硬件支持浮点表达的实现上, 浮点数也被用于表示其真
正数学值为无理数的计算结果

支持复数 -- 通过在负数上获取平方根和对数所得的结果, 甚至还指定了复域上无理和超越函数的主值和分之切断


字面数值:


    对于一个给定类型的数字来说, 它可以有多种不同的字面表达方式, 所有这些都将被 Lisp 读取器转化成相同
的对象表示. 例如可以将整数 10 写成: 10, 20/2, #xA 或是其他形式的任何数字.

    整数: 可选的符号(+ 或 -) + 一个或多个数字
    比值: 可选的符号(+ 或 -) + 一个代表分子的数位序列 + / +  一个代表分母的数位序列

    所有的有理数在读取后都被规范化. 例如, 10 和 20/2 都被读成同一个数字

    如果前缀是 #b 或 #B, 一个字面有理数将以  二  进制来读取, 合法数字 0-1
    如果前缀是 #o 或 #O, 一个字面有理数将以  八  进制来读取, 合法数字 0-7
    如果前缀是 #x 或 #X, 一个字面有理数将以 十六 进制来读取, 合法数字 0-9, a-f, A-F
    也可以使用 #nR 或 #nr 以 2-36 的其它进制书写有理数, 其中 n 代表进制数(以 10 进制书写), 超过 9
的附加数字从字母 a-z 或 A-Z 中获取. 例如, #11R11 表示十进制的 12.

    不能以一种进制书写比值的分子, 而用另一中进制书写分母, #x10/#o10 是错误的, #x10/10 是正确的(1)
    可以将整数而非比值写成以十进制小数点结尾的十进制数

    123             -> 123
    +123            -> 123
    -123            -> -123
    123.            -> 123
    2/3             -> 2/3
    -2/3            -> -2/3
    4/6             -> 2/3
    6/3             -> 2
    #b10101         -> 21
    #b1010/#b1011   -> 10/11
    #o777           -> 511
    #xdada          -> 56026
    #36rabcdefghijk -> 37713647386641440


    Common Lisp 定义了四种浮点数子类型: 短型, 单精度, 双精度, 长型

    浮点数的基本格式: 一个可选的符号后跟一个非空的十进制数字序列, 同时可能带有一个嵌入的小数点, 这个
序列可能后接一个代表计算机科学计数法的指数标记, 指数标记由单个字母后跟一个可选符号和一个数字序列组成

    指数标记 s, f, d, l (以及相应的大写字母) 分别代表短型, 单精度, 双精度, 长型, 字母 e 代表默认方式
(单精度). 没有指数标记的以默认表示来读取, 并且必须包含一个小数点后接至少一个数字

    1.0             -> 1.0
    1e0             -> 1.0
    1d0             -> 1.0d0
    123.0           -> 123.0
    123e0           -> 123.0
    0.123           -> 0.123
    .123            -> 0.123
    123e-3          -> 0.123
    123E-3          -> 0.123
    0.123e20        -> 1.23e19
    123d23          -> 1.23d25


    复数: #c 或 #C 跟上一个由两个实数所组成的列表, 分别代表实部和虚部. 不存在一个零虚部的复数, 因为
这样的值从数学上来讲是有理数, 他们将用有理数或浮点数来表示

    #c(2 1)         -> #c(2 1)
    #c(2/3 3/4)     -> #c(2/3 3/4)
    #c(2 1.0)       -> #c(2 1.0)
    #c(2.0 1.0d0)   -> #c(2.0 1.0d0)
    #c(1/2 1.0)     -> #c(1/2 1.0)
    #c(3 0)         -> 3
    #c(3.0 0.0)     -> #c(3.0 0.0)
    #c(1/2 0)       -> 1/2
    #c(-6/3 0)      -> -2
    #c(1.0 0)       -> 1.0


初等数学:

    函数 +, -, *, / 支持所有不同类型的数字, 使用超过两个参数来调用其中的任何一个函数, 等价于在前两个
参数上调用相同的函数后再在所得结果和其余参数上再次调用. 例如 (+ 1 2 3) 等价于 (+ (+ 1 2) 3). 当只有
一个参数时 +, * 返回其值, - 返回其反值, / 返回其倒数.

    (+)                     -> 0
    (*)                     -> 1
    (+ 1 2)                 -> 3
    (+ 1 2 3)               -> 6
    (+ 10.0 3.0)            -> 13.0
    (+ #c(1 2) #c(3 4))     -> #c(4 6)
    (- 5 4)                 -> 1
    (- 2)                   -> -2
    (- 10 3 5)              -> 2
    (* 2 3)                 -> 6
    (* 2 3 4)               -> 24
    (/ 10 5)                -> 2
    (/ 10 5 2)              -> 1
    (/ 2 3)                 -> 2/3
    (/ 4)                   -> 1/4

    (+ 1 2.0)               -> 3.0
    (/ 2 3.0)               -> 0.6666667
    (+ #c(1 2) 3)           -> #c(4 2)
    (+ #c(1 2) 3/2)         -> #c(5/2 2)
    (+ #c(1 1) #c(2 -1))    -> 3


    floor       向负无穷截断
    ceiling     向正无穷截断
    truncate    向零方向截断
    round       舍入到最接近的整数, 如果位于两个整数之间, 它舍入到最接近的偶数上
    mod, rem    两个实数截断相除的模和余数

    (mod -5.1 2)    -> 0.9000001        ; >= 0
    (rem -5.1 2)    -> -1.0999999       ; <= 0


    1+, 1- 从一个数字增加或减少 1. 注意他们和宏 incf, decf 有所不同, 1+, 1- 只是返回一个新的值, 而
incf, decf 会修改一个位置
